2244. Minimum Rounds to Complete All Tasks, Medium, 1000, 24, Add to List, Share
You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level.

Return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.

Example 1:

Input: tasks = [2,2,3,3,2,4,4,4,4,4]
Output: 4
Explanation: To complete all the tasks, a possible plan is:
- In the first round, you complete 3 tasks of difficulty level 2. 
- In the second round, you complete 2 tasks of difficulty level 3. 
- In the third round, you complete 3 tasks of difficulty level 4. 
- In the fourth round, you complete 2 tasks of difficulty level 4.  
It can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.

Example 2:

Input: tasks = [2,3,3]
Output: -1
Explanation: There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1.

------------------------------------------------------------------------
class Solution {
public:
    int minimumRounds(vector<int>& tasks) {
        // storing the counts of each number into a map
        unordered_map<int, int> m;
        for(int i=0;i<tasks.size();i++){
            m[tasks[i]]++;
        }
        int ans = 0;
        unordered_map<int, int> :: iterator itr;
        // solving using this sequence
        // if counts is 1 => -1, 2 or 3 => 1, 4 or 5 or 6 => 2, and so on...
        for(itr=m.begin(); itr!=m.end(); itr++){
            if(itr->second == 1){
                return -1;
            }
            if(itr->second==2 || itr->second==3){
                ans++;
            }
            else{
                int n1 = 4;
                int n2 = 5;
                int n3 = 6;
                int temp = itr->second;
                int count = 2;
                while(temp!=n1 && temp!=n2 && temp!=n3){
                    count++;
                    n1 += 3;
                    n2 += 3;
                    n3 += 3;
                }
                ans += count;
            }
        }
        return ans;
    }
};
